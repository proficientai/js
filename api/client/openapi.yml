openapi: 3.0.1
info:
  title: api
  version: ''
paths:
  /agents:
    get:
      description: >-
        Returns a list of agents that belong to the current project. The agents
        are returned sorted by creation date, with the most recently created
        agents appearing first.
      operationId: agents_list
      tags:
        - Agents
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentsList'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      summary: List all agents
  /agents/{agent_id}:
    get:
      description: Retrieves the agent with the given ID.
      operationId: agents_get
      tags:
        - Agents
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AgentId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      summary: Retrieve an agent
  /interactions:
    get:
      description: >-
        Returns a list of interactions associated with the user. The
        interactions are returned sorted by creation date, with the most
        recently created interactions appearing first.
      operationId: interactions_list
      tags:
        - Interactions
      parameters:
        - name: agent_id
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/AgentId'
            nullable: true
        - name: limit
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PaginationLimit'
        - name: starting_after
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PaginationStartingAfter'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InteractionsList'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      summary: List all interactions
    post:
      description: Creates a new `Interaction` with an agent.
      operationId: interactions_create
      tags:
        - Interactions
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InteractionCreateResponse'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      summary: Create an interaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InteractionCreateParams'
  /interactions/{interaction_id}:
    get:
      description: Retrieves the interaction with the given ID.
      operationId: interactions_get
      tags:
        - Interactions
      parameters:
        - name: interaction_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/InteractionId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interaction'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      summary: Retrieve an interaction
    post:
      description: >-
        Updates the properties of the specified interaction. Only the provided
        properties will be updated. Any properties not provided will be left
        unchanged.
      operationId: interactions_update
      tags:
        - Interactions
      parameters:
        - name: interaction_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/InteractionId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interaction'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      summary: Update an interaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InteractionUpdateParams'
    delete:
      description: >-
        Permanently deletes the specified interaction and all the messages
        within it. This cannot be undone.
      operationId: interactions_delete
      tags:
        - Interactions
      parameters:
        - name: interaction_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/InteractionId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interaction'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      summary: Delete an interaction
  /messages:
    get:
      description: Returns a list of all messages in the specified interaction.
      operationId: messages_list
      tags:
        - Messages
      parameters:
        - name: interaction_id
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/InteractionId'
        - name: limit
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PaginationLimit'
        - name: starting_after
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PaginationStartingAfter'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesList'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      summary: List all messages in an interaction
    post:
      description: Creates a new `Message` in a given `Interaction`
      operationId: messages_create
      tags:
        - Messages
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '409':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      summary: Create a message in an interaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreateParams'
  /messages/{message_id}:
    get:
      description: Retrieves the message with the given ID.
      operationId: messages_get
      tags:
        - Messages
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/MessageId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      summary: Retrieve a message
  /messages/{message_id}/ask:
    post:
      description: Requests a reply from the `Agent` to a given `Message`.
      operationId: messages_ask
      tags:
        - Messages
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/MessageId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '409':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      summary: Ask for a reply to a message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageAskParams'
  /users/{user_id}:
    get:
      description: Retrieves the user with the given ID.
      operationId: users_get
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      summary: Retrieve a user
    post:
      description: >-
        Updates the properties of the specified user. Only the provided
        properties will be updated. Any properties not provided will be left
        unchanged.
      operationId: users_update
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      summary: Update a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateParams'
components:
  schemas:
    AgentsList:
      title: AgentsList
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Agent'
      required:
        - data
    InitialTurn:
      title: InitialTurn
      $ref: '#/components/schemas/InteractionParticipant'
      description: >-
        Indicates who sends the first message in each interaction. Defaults to
        `"user"`.
    AgentId:
      title: AgentId
      type: string
      description: The unique identifier of the agent
    AgentObjectType:
      title: AgentObjectType
      type: string
      enum:
        - agent
      description: The type of the `Agent` object
    AgentActiveStatus:
      title: AgentActiveStatus
      type: boolean
      description: >-
        Whether the agent is currently active. If not, users will not be able to
        interact with the agent.
    AgentDescription:
      title: AgentDescription
      type: string
      description: The description of the agent, intended for developers' reference.
    AgentDisplayDescription:
      title: AgentDisplayDescription
      type: string
      description: >-
        The agent's public-facing description, meant to be visible to your
        users.
    AgentDisplayName:
      title: AgentDisplayName
      type: string
      description: >-
        The agent's display name, intended to serve as the public-facing name
        visible to your users.
    AgentName:
      title: AgentName
      type: string
      description: >-
        The name of the agent, designed to be visible to developers for internal
        reference purposes.
    Agent:
      title: Agent
      type: object
      description: >-
        <p>An _agent_ is an AI entity that exists to serve your project's users.
        Agents are intelligent, configurable and context-aware and can interact
        with your users via a messaging system enabled by the Proficient
        API.</p>
      properties:
        id:
          $ref: '#/components/schemas/AgentId'
        object:
          $ref: '#/components/schemas/AgentObjectType'
        active:
          $ref: '#/components/schemas/AgentActiveStatus'
        description:
          $ref: '#/components/schemas/AgentDescription'
        display_description:
          $ref: '#/components/schemas/AgentDisplayDescription'
        display_name:
          $ref: '#/components/schemas/AgentDisplayName'
        name:
          $ref: '#/components/schemas/AgentName'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      required:
        - id
        - object
        - active
        - description
        - display_description
        - display_name
        - name
        - created_at
        - updated_at
    InteractionId:
      title: InteractionId
      type: string
      description: The unique identifier of the interaction
    InteractionObjectType:
      title: InteractionObjectType
      type: string
      enum:
        - interaction
      description: The type of the `Interaction` object
    InteractionArchived:
      title: InteractionArchived
      type: boolean
      description: Whether the interaction has been archived by the user
    InteractionName:
      title: InteractionName
      type: string
      description: The name of the interaction
    InteractionTotalMessageCount:
      title: InteractionTotalMessageCount
      type: integer
      description: The total number of messages in the interaction
    InteractionParticipant:
      title: InteractionParticipant
      type: string
      enum:
        - user
        - agent
      description: >-
        Represents the type of the participant in a given interaction. As an
        example, message are created by interaction participants so the
        `sent_by` property of a `Message` object must be an
        `InteractionParticipant`.
    InteractionCreateParams:
      title: InteractionCreateParams
      type: object
      description: The data with which an interaction is created.
      properties:
        agent_id:
          $ref: '#/components/schemas/AgentId'
      required:
        - agent_id
    InteractionCreateResponse:
      title: InteractionCreateResponse
      type: object
      description: >-
        An object that contains the initial interaction data including the
        `Interaction` object itself and the initial messages associated with it.
      properties:
        interaction:
          $ref: '#/components/schemas/Interaction'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
      required:
        - interaction
        - messages
    InteractionUpdateParams:
      title: InteractionUpdateParams
      type: object
      description: The data with which an interaction is updated.
      properties:
        name:
          $ref: '#/components/schemas/InteractionName'
          nullable: true
    Interaction:
      title: Interaction
      type: object
      description: >-
        <p>Users communicate with agents via <i>interactions</i>. You can think
        of each interaction as a conversation between an agent and user.</p>
      properties:
        id:
          $ref: '#/components/schemas/InteractionId'
        object:
          $ref: '#/components/schemas/InteractionObjectType'
        agent_id:
          $ref: '#/components/schemas/AgentId'
        archived:
          $ref: '#/components/schemas/InteractionArchived'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        initial_turn:
          $ref: '#/components/schemas/InitialTurn'
        name:
          $ref: '#/components/schemas/InteractionName'
        total_message_count:
          $ref: '#/components/schemas/InteractionTotalMessageCount'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        user_id:
          $ref: '#/components/schemas/UserId'
      required:
        - id
        - object
        - agent_id
        - archived
        - created_at
        - initial_turn
        - name
        - total_message_count
        - updated_at
        - user_id
    MessageId:
      title: MessageId
      type: string
      description: The unique identifier of the message
    MessageObjectType:
      title: MessageObjectType
      type: string
      enum:
        - message
      description: The type of the `Message` object
    MessageContent:
      title: MessageContent
      type: string
      description: The content of the message
    MessageDepth:
      title: MessageDepth
      type: integer
      description: >-
        The depth of the message node in the interaction tree. This will be 0
        for all root-level messages that mark the beginning of the interaction
        and increase as the conversation grows longer.
    MessageParentId:
      title: MessageParentId
      type: string
      nullable: true
      description: >-
        The ID of the message that directly precedes a given message within a
        particular conversation.
    MessageCreateParams:
      title: MessageCreateParams
      type: object
      description: The data with which a message is created.
      properties:
        interaction_id:
          $ref: '#/components/schemas/InteractionId'
        content:
          $ref: '#/components/schemas/MessageContent'
        parent_id:
          type: string
          nullable: true
      required:
        - interaction_id
        - content
    MessageAskParams:
      title: MessageAskParams
      type: object
      description: The data with which a reply to a message is asked for.
      properties:
        interaction_id:
          $ref: '#/components/schemas/InteractionId'
      required:
        - interaction_id
    Message:
      title: Message
      type: object
      description: >-
        <p>Each interaction holds a number of <i>messages</i> and every message
        belongs to an interaction. The `sent_by` property of a message indicates
        whether a message was created by an agent or a user.</p>
      properties:
        id:
          $ref: '#/components/schemas/MessageId'
        object:
          $ref: '#/components/schemas/MessageObjectType'
        content:
          $ref: '#/components/schemas/MessageContent'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        depth:
          $ref: '#/components/schemas/MessageDepth'
        interaction_id:
          $ref: '#/components/schemas/InteractionId'
        parent_id:
          $ref: '#/components/schemas/MessageParentId'
          nullable: true
        sent_by:
          $ref: '#/components/schemas/InteractionParticipant'
      required:
        - id
        - object
        - content
        - created_at
        - depth
        - interaction_id
        - sent_by
    UserId:
      title: UserId
      type: string
      description: The unique identifier of the user
    UserObjectType:
      title: UserObjectType
      type: string
      enum:
        - user
      description: The type of the `User` object
    UserExternalId:
      title: UserExternalId
      type: string
      description: >-
        A string that uniquely identifies the user within your project. Ensure
        that this is the ID that you use to identify the user in your system
        e.g. database ID, Firebase Auth ID etc. Failing to do so may cause
        unexpected bugs and errors in your application.
    UserFirstName:
      title: UserFirstName
      type: string
      description: The first name of the user.
    UserLastName:
      title: UserLastName
      type: string
      description: The last name of the user.
    UserLiveMode:
      title: UserLiveMode
      type: boolean
      description: >-
        Whether the user exists in live mode. This will be `false` if the user
        is a test user.
    UserUpdateParams:
      title: UserUpdateParams
      type: object
      description: The data with which a user is updated.
      properties:
        first_name:
          $ref: '#/components/schemas/UserFirstName'
          nullable: true
        last_name:
          $ref: '#/components/schemas/UserLastName'
          nullable: true
    User:
      title: User
      type: object
      description: <p>Represents a user of your project.</p>
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        object:
          $ref: '#/components/schemas/UserObjectType'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        external_id:
          $ref: '#/components/schemas/UserExternalId'
        first_name:
          $ref: '#/components/schemas/UserFirstName'
        last_name:
          $ref: '#/components/schemas/UserLastName'
        live_mode:
          $ref: '#/components/schemas/UserLiveMode'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      required:
        - id
        - object
        - created_at
        - external_id
        - first_name
        - last_name
        - live_mode
        - updated_at
    ApiErrorCode:
      title: ApiErrorCode
      type: string
      enum:
        - invalid_request
        - invalid_credentials
        - forbidden
        - resource_not_found
        - conflict
        - unavailable
        - unknown
    ApiErrorBody:
      title: ApiErrorBody
      type: object
      properties:
        code:
          $ref: '#/components/schemas/ApiErrorCode'
        message:
          type: string
      required:
        - code
        - message
    ApiError:
      title: ApiError
      type: object
      description: >-
        Represents the general interface of an API error. The body of every
        error returned by the API contains `code` and `message` fields.
      properties:
        error:
          $ref: '#/components/schemas/ApiErrorBody'
      required:
        - error
    PaginationLimit:
      title: PaginationLimit
      type: string
      nullable: true
      description: >-
        Used to specify the maximum number of objects that can be returned. Must
        be an integer ranging from 1 to 100. Defaults to 20.
    PaginationStartingAfter:
      title: PaginationStartingAfter
      type: string
      nullable: true
      description: >-
        A pagination cursor parameter that takes an object ID as a value. This
        indicates the position of the list where you want to start fetching the
        data. For example, if your first request returns 100 objects ending with
        `obj_100`, you can use `starting_after=obj_100` in your subsequent API
        call to retrieve the next page of the list.
    PaginationHasMore:
      title: PaginationHasMore
      type: boolean
      description: >-
        Whether the database has more items after this list. If true, then you
        can send more paginated requests to exhaust the remaining items.
    CreatedAt:
      title: CreatedAt
      type: integer
      description: >-
        The time at which the object was created, measured in milliseconds since
        the Unix epoch
    UpdatedAt:
      title: UpdatedAt
      type: integer
      description: >-
        The time at which the object was last updated, measured in milliseconds
        since the Unix epoch
    InteractionsList:
      title: InteractionsList
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Interaction'
        has_more:
          $ref: '#/components/schemas/PaginationHasMore'
      required:
        - data
        - has_more
    MessagesList:
      title: MessagesList
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        has_more:
          $ref: '#/components/schemas/PaginationHasMore'
      required:
        - data
        - has_more
  securitySchemes:
    SecretKeyAuth:
      type: apiKey
      in: header
      name: Authorization
servers:
  - url: https://api.proficientai.com
    description: Production (The production environment)
  - url: https://main-64bxvpctea-uc.a.run.app
    description: Staging (The staging environment)
  - url: http://localhost:8080
    description: Development (The local environment)
