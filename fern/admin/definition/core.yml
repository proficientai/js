# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

types:
  # Error interface
  ErrorCode:
    enum:
      - invalid_request
      - invalid_credentials
      - forbidden
      - resource_not_found
      - conflict
      - unavailable
      - unknown

  Error:
    properties:
      code: ErrorCode
      message: string
    docs: Represents the general interface of an API error. The body of every error returned by the API contains `code` and `message` fields.

  # Commonly used parameters

  PaginationLimit:
    type: optional<string>
    docs: Used to specify the maximum number of objects that can be returned. Must be an integer ranging from 1 to 100. Defaults to 20.
    examples:
      - name: Example0
        value: '25'

  PaginationStartingAfter:
    type: optional<string>
    docs: A pagination cursor parameter that takes an object ID as a value. This indicates the position of the list where you want to start fetching the data. For example, if your first request returns 100 objects ending with `obj_100`, you can use `starting_after=obj_100` in your subsequent API call to retrieve the next page of the list.

  PaginationHasMore:
    type: boolean
    docs: Whether the database has more items after this list. If true, then you can send more paginated requests to exhaust the remaining items.

  # Commonly used object properties

  CreatedAt:
    type: integer
    docs: The time at which the object was created, measured in milliseconds since the Unix epoch
    examples:
      - name: Example0
        value: 1671631795145

  UpdatedAt:
    type: integer
    docs: The time at which the object was last updated, measured in milliseconds since the Unix epoch
    examples:
      - name: Example0
        value: 1671631799692

  # Agent

  AgentId:
    type: string
    docs: The unique identifier of the `Agent`
    examples:
      - name: Example0
        value: ag_Lad8YCGGiDLiqIZPWRXmc2ix

  AgentObjectType:
    enum:
      - agent
    docs: The type of the `Agent` object
    examples:
      - name: Example0
        value: agent

  AgentCreateParams:
    properties:
      name: string
      # TODO: Implement rest
    docs: The data with which an `Agent` is created.

  # Objects

  Agent:
    properties:
      id: AgentId
      object: AgentObjectType
      active:
        type: boolean
        docs: Whether the `Agent` is currently active. If not, users will not be able to communicate with the `Agent`.
      name:
        type: string
        docs: The name of the `Agent`
      description:
        type: string
        docs: The description of the `Agent`
      created_at: CreatedAt
      updated_at: UpdatedAt
    examples:
      - name: Example0
        value:
          id: $AgentId.Example0
          object: agent
          active: true
          name: Eliza
          description: A general-purpose assistant
          created_at: $CreatedAt.Example0
          updated_at: $UpdatedAt.Example0
    docs: <p>An _agent_ is an AI entity that exists to serve your organization. Agents are intelligent, configurable and context-aware and can interact with your users via a messaging system enabled by the Proficient API.</p>

errors:
  InvalidRequestError:
    status-code: 400
    type: Error
  InvalidCredentialsError:
    status-code: 401
    type: Error
  ForbiddenError:
    status-code: 403
    type: Error
  ResourceNotFoundError:
    status-code: 404
    type: Error
  ConflictError:
    status-code: 409
    type: Error
  InternalError:
    status-code: 500
    type: Error
  ServiceUnavailableError:
    status-code: 503
    type: Error
