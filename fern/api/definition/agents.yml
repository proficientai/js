# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  core: core.yml
  agent: core.agent.yml
  agent_config: core.agent_config.yml

service:
  auth: false
  base-path: /agents
  endpoints:
    list:
      audiences:
        - admin
        - client
      path: ''
      method: GET
      docs: Returns a list of agents that belong to the current project. The agents are returned sorted by creation date, with the most recently created agents appearing first.
      display-name: List all agents
      response: AgentsList
      errors:
        - core.InternalError

    get:
      audiences:
        - admin
        - client
      path: /{agent_id}
      method: GET
      docs: Retrieves the agent with the given ID.
      display-name: Retrieve an agent
      path-parameters:
        agent_id: agent.AgentId
      response: agent.Agent
      errors:
        - core.ResourceNotFoundError
        - core.InternalError

    create:
      audiences:
        - admin
      path: ''
      method: POST
      docs: Creates a new agent with the given properties.
      display-name: Create an agent
      request:
        name: CreateAgentRequest
        body: agent.AgentCreateParams
      response: agent.Agent
      errors:
        - core.InvalidRequestError
        - core.ForbiddenError
        - core.InternalError

    update:
      audiences:
        - admin
      path: /{agent_id}
      method: POST
      docs: Updates the properties of the specified agent. Only the provided properties will be updated. Any properties not provided will be left unchanged.
      display-name: Update an agent
      path-parameters:
        agent_id: agent.AgentId
      request:
        name: UpdateAgentRequest
        body: agent.AgentUpdateParams
      response: agent.Agent
      errors:
        - core.InvalidRequestError
        - core.ForbiddenError
        - core.ResourceNotFoundError
        - core.InternalError
        - core.ServiceUnavailableError

    getConfig:
      audiences:
        - admin
      path: /{agent_id}/config
      method: GET
      docs: Retrieves the current configuration of the specified agent.
      display-name: Retrieve agent configuration
      path-parameters:
        agent_id: agent.AgentId
      response: agent_config.AgentConfig
      errors:
        - core.ResourceNotFoundError
        - core.InternalError

    updateConfig:
      audiences:
        - admin
      path: /{agent_id}/config
      method: POST
      docs: Updates the configuration of the specified agent. Only the provided properties will be updated. Any properties not provided will be left unchanged.
      display-name: Update agent configuration
      path-parameters:
        agent_id: agent.AgentId
      request:
        name: UpdateAgentConfigRequest
        body: agent_config.AgentConfigUpdateParams
      response: agent_config.AgentConfig
      errors:
        - core.ResourceNotFoundError
        - core.InternalError
        - core.ServiceUnavailableError

    activate:
      audiences:
        - admin
      path: /{agent_id}/activate
      method: POST
      docs: Activates the specified agent. New message or interaction requests sent to this agent will not be blocked while the agent is active. This request does not fail if the agent is already active.
      display-name: Activate an agent
      path-parameters:
        agent_id: agent.AgentId
      response: agent.Agent
      errors:
        - core.ResourceNotFoundError
        - core.InternalError
        - core.ServiceUnavailableError

    deactivate:
      audiences:
        - admin
      path: /{agent_id}/deactivate
      method: POST
      docs: Deactivates the specified agent. Any new message or interaction requests sent to this agent will be blocked while the agent is disabled. This request does not fail if the agent is already deactivated.
      display-name: Deactivate an agent
      path-parameters:
        agent_id: agent.AgentId
      response: agent.Agent
      errors:
        - core.ResourceNotFoundError
        - core.InternalError
        - core.ServiceUnavailableError

    delete:
      audiences:
        - admin
      path: /{agent_id}
      method: DELETE
      docs: Permanently deletes the specified agent and all the interactions associated with it. This cannot be undone.
      display-name: Delete an agent
      path-parameters:
        agent_id: agent.AgentId
      response: agent.Agent
      errors:
        - core.ResourceNotFoundError
        - core.InternalError
        - core.ServiceUnavailableError

types:
  AgentsList:
    properties:
      data: list<agent.Agent>
