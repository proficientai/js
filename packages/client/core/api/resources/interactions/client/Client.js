"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Interactions = void 0;
const core = __importStar(require("../../../../core"));
const Proficient = __importStar(require("../../.."));
const url_search_params_1 = __importDefault(require("@ungap/url-search-params"));
const url_join_1 = __importDefault(require("url-join"));
const serializers = __importStar(require("../../../../serialization"));
const errors = __importStar(require("../../../../errors"));
class Interactions {
    constructor(options) {
        this.options = options;
    }
    /**
     * Returns a list of interactions associated with the user. The interactions are returned sorted by creation date, with the most recently created interactions appearing first.
     * @throws {@link Proficient.ForbiddenError}
     * @throws {@link Proficient.ResourceNotFoundError}
     * @throws {@link Proficient.InternalError}
     */
    list(request = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { agentId, limit, startingAfter } = request;
            const _queryParams = new url_search_params_1.default();
            if (agentId != null) {
                _queryParams.append("agent_id", agentId);
            }
            if (limit != null) {
                _queryParams.append("limit", limit);
            }
            if (startingAfter != null) {
                _queryParams.append("starting_after", startingAfter);
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)(yield core.Supplier.get(this.options.environment), "/interactions"),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-PROFICIENT-API-KEY": (yield core.Supplier.get(this.options.xProficientApiKey)) != null
                        ? yield core.Supplier.get(this.options.xProficientApiKey)
                        : undefined,
                    "X-PROFICIENT-USER-EXTERNAL-ID": (yield core.Supplier.get(this.options.xProficientUserExternalId)) != null
                        ? yield core.Supplier.get(this.options.xProficientUserExternalId)
                        : undefined,
                    "X-PROFICIENT-USER-HMAC": (yield core.Supplier.get(this.options.xProficientUserHmac)) != null
                        ? yield core.Supplier.get(this.options.xProficientUserHmac)
                        : undefined,
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                queryParameters: _queryParams,
            });
            if (_response.ok) {
                return yield serializers.InteractionsList.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 403:
                        throw new Proficient.ForbiddenError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new Proficient.ResourceNotFoundError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new Proficient.InternalError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.ProficientError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ProficientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ProficientTimeoutError();
                case "unknown":
                    throw new errors.ProficientError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Retrieves the interaction with the given ID.
     * @throws {@link Proficient.ForbiddenError}
     * @throws {@link Proficient.ResourceNotFoundError}
     * @throws {@link Proficient.InternalError}
     */
    get(interactionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)(yield core.Supplier.get(this.options.environment), `/interactions/${yield serializers.InteractionId.jsonOrThrow(interactionId)}`),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-PROFICIENT-API-KEY": (yield core.Supplier.get(this.options.xProficientApiKey)) != null
                        ? yield core.Supplier.get(this.options.xProficientApiKey)
                        : undefined,
                    "X-PROFICIENT-USER-EXTERNAL-ID": (yield core.Supplier.get(this.options.xProficientUserExternalId)) != null
                        ? yield core.Supplier.get(this.options.xProficientUserExternalId)
                        : undefined,
                    "X-PROFICIENT-USER-HMAC": (yield core.Supplier.get(this.options.xProficientUserHmac)) != null
                        ? yield core.Supplier.get(this.options.xProficientUserHmac)
                        : undefined,
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
            });
            if (_response.ok) {
                return yield serializers.Interaction.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 403:
                        throw new Proficient.ForbiddenError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new Proficient.ResourceNotFoundError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new Proficient.InternalError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.ProficientError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ProficientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ProficientTimeoutError();
                case "unknown":
                    throw new errors.ProficientError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Creates a new `Interaction` with an agent.
     * @throws {@link Proficient.ForbiddenError}
     * @throws {@link Proficient.ResourceNotFoundError}
     * @throws {@link Proficient.InternalError}
     */
    create(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)(yield core.Supplier.get(this.options.environment), "/interactions"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-PROFICIENT-API-KEY": (yield core.Supplier.get(this.options.xProficientApiKey)) != null
                        ? yield core.Supplier.get(this.options.xProficientApiKey)
                        : undefined,
                    "X-PROFICIENT-USER-EXTERNAL-ID": (yield core.Supplier.get(this.options.xProficientUserExternalId)) != null
                        ? yield core.Supplier.get(this.options.xProficientUserExternalId)
                        : undefined,
                    "X-PROFICIENT-USER-HMAC": (yield core.Supplier.get(this.options.xProficientUserHmac)) != null
                        ? yield core.Supplier.get(this.options.xProficientUserHmac)
                        : undefined,
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.InteractionCreateParams.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            });
            if (_response.ok) {
                return yield serializers.InteractionCreateResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 403:
                        throw new Proficient.ForbiddenError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new Proficient.ResourceNotFoundError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new Proficient.InternalError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.ProficientError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ProficientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ProficientTimeoutError();
                case "unknown":
                    throw new errors.ProficientError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Updates the properties of the specified interaction. Only the provided properties will be updated. Any properties not provided will be left unchanged.
     * @throws {@link Proficient.ForbiddenError}
     * @throws {@link Proficient.ResourceNotFoundError}
     * @throws {@link Proficient.InternalError}
     */
    update(interactionId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)(yield core.Supplier.get(this.options.environment), `/interactions/${yield serializers.InteractionId.jsonOrThrow(interactionId)}`),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-PROFICIENT-API-KEY": (yield core.Supplier.get(this.options.xProficientApiKey)) != null
                        ? yield core.Supplier.get(this.options.xProficientApiKey)
                        : undefined,
                    "X-PROFICIENT-USER-EXTERNAL-ID": (yield core.Supplier.get(this.options.xProficientUserExternalId)) != null
                        ? yield core.Supplier.get(this.options.xProficientUserExternalId)
                        : undefined,
                    "X-PROFICIENT-USER-HMAC": (yield core.Supplier.get(this.options.xProficientUserHmac)) != null
                        ? yield core.Supplier.get(this.options.xProficientUserHmac)
                        : undefined,
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.InteractionUpdateParams.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            });
            if (_response.ok) {
                return yield serializers.Interaction.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 403:
                        throw new Proficient.ForbiddenError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new Proficient.ResourceNotFoundError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new Proficient.InternalError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.ProficientError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ProficientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ProficientTimeoutError();
                case "unknown":
                    throw new errors.ProficientError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Permanently deletes the specified interaction and all the messages within it. This cannot be undone.
     * @throws {@link Proficient.ForbiddenError}
     * @throws {@link Proficient.ResourceNotFoundError}
     * @throws {@link Proficient.InternalError}
     * @throws {@link Proficient.ServiceUnavailableError}
     */
    delete(interactionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)(yield core.Supplier.get(this.options.environment), `/interactions/${yield serializers.InteractionId.jsonOrThrow(interactionId)}`),
                method: "DELETE",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-PROFICIENT-API-KEY": (yield core.Supplier.get(this.options.xProficientApiKey)) != null
                        ? yield core.Supplier.get(this.options.xProficientApiKey)
                        : undefined,
                    "X-PROFICIENT-USER-EXTERNAL-ID": (yield core.Supplier.get(this.options.xProficientUserExternalId)) != null
                        ? yield core.Supplier.get(this.options.xProficientUserExternalId)
                        : undefined,
                    "X-PROFICIENT-USER-HMAC": (yield core.Supplier.get(this.options.xProficientUserHmac)) != null
                        ? yield core.Supplier.get(this.options.xProficientUserHmac)
                        : undefined,
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
            });
            if (_response.ok) {
                return yield serializers.Interaction.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 403:
                        throw new Proficient.ForbiddenError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new Proficient.ResourceNotFoundError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new Proficient.InternalError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 503:
                        throw new Proficient.ServiceUnavailableError(yield serializers.ApiError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.ProficientError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ProficientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ProficientTimeoutError();
                case "unknown":
                    throw new errors.ProficientError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            const value = yield core.Supplier.get(this.options.authorization);
            if (value != null) {
                return value;
            }
            return undefined;
        });
    }
}
exports.Interactions = Interactions;
