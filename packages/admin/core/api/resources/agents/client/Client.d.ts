/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Proficient from "../../..";
export declare namespace Agents {
    interface Options {
        environment: core.Supplier<environments.ProficientEnvironment | string>;
        secretKey?: core.Supplier<string | undefined>;
        apiKey?: core.Supplier<string | undefined>;
        userExternalId?: core.Supplier<string | undefined>;
        userHmac?: core.Supplier<string | undefined>;
    }
}
export declare class Agents {
    protected readonly options: Agents.Options;
    constructor(options: Agents.Options);
    /**
     * Returns a list of agents that belong to the current project. The agents are returned sorted by creation date, with the most recently created agents appearing first.
     * @throws {@link Proficient.InternalError}
     */
    list(): Promise<Proficient.AgentsList>;
    /**
     * Retrieves the agent with the given ID.
     * @throws {@link Proficient.ResourceNotFoundError}
     * @throws {@link Proficient.InternalError}
     */
    get(agentId: Proficient.AgentId): Promise<Proficient.Agent>;
    /**
     * Creates a new agent with the given properties.
     * @throws {@link Proficient.InvalidRequestError}
     * @throws {@link Proficient.ForbiddenError}
     * @throws {@link Proficient.InternalError}
     */
    create(request: Proficient.AgentCreateParams): Promise<Proficient.Agent>;
    /**
     * Updates the properties of the specified agent. Only the provided properties will be updated. Any properties not provided will be left unchanged.
     * @throws {@link Proficient.InvalidRequestError}
     * @throws {@link Proficient.ForbiddenError}
     * @throws {@link Proficient.ResourceNotFoundError}
     * @throws {@link Proficient.InternalError}
     * @throws {@link Proficient.ServiceUnavailableError}
     */
    update(agentId: Proficient.AgentId, request: Proficient.AgentUpdateParams): Promise<Proficient.Agent>;
    /**
     * Retrieves the current configuration of the specified agent.
     * @throws {@link Proficient.ResourceNotFoundError}
     * @throws {@link Proficient.InternalError}
     */
    getConfig(agentId: Proficient.AgentId): Promise<Proficient.AgentConfig>;
    /**
     * Updates the configuration of the specified agent. Only the provided properties will be updated. Any properties not provided will be left unchanged.
     * @throws {@link Proficient.ResourceNotFoundError}
     * @throws {@link Proficient.InternalError}
     * @throws {@link Proficient.ServiceUnavailableError}
     */
    updateConfig(agentId: Proficient.AgentId, request: Proficient.AgentConfigUpdateParams): Promise<Proficient.AgentConfig>;
    /**
     * Activates the specified agent. New message or interaction requests sent to this agent will not be blocked while the agent is active. This request does not fail if the agent is already active.
     * @throws {@link Proficient.ResourceNotFoundError}
     * @throws {@link Proficient.InternalError}
     * @throws {@link Proficient.ServiceUnavailableError}
     */
    activate(agentId: Proficient.AgentId): Promise<Proficient.Agent>;
    /**
     * Deactivates the specified agent. Any new message or interaction requests sent to this agent will be blocked while the agent is disabled. This request does not fail if the agent is already deactivated.
     * @throws {@link Proficient.ResourceNotFoundError}
     * @throws {@link Proficient.InternalError}
     * @throws {@link Proficient.ServiceUnavailableError}
     */
    deactivate(agentId: Proficient.AgentId): Promise<Proficient.Agent>;
    /**
     * Permanently deletes the specified agent and all the interactions associated with it. This cannot be undone.
     * @throws {@link Proficient.ResourceNotFoundError}
     * @throws {@link Proficient.InternalError}
     * @throws {@link Proficient.ServiceUnavailableError}
     */
    delete(agentId: Proficient.AgentId): Promise<Proficient.Agent>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
