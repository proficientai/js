/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as ProficientAiApi from "../../..";
import express from "express";
import * as serializers from "../../../../serialization";
export interface AgentsServiceMethods {
    list(req: express.Request<never, ProficientAiApi.AgentsList, never, never>, res: {
        send: (responseBody: ProficientAiApi.AgentsList) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    get(req: express.Request<{
        agent_id: serializers.AgentId.Raw;
    }, ProficientAiApi.Agent, never, never>, res: {
        send: (responseBody: ProficientAiApi.Agent) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    create(req: express.Request<never, ProficientAiApi.Agent, ProficientAiApi.AgentCreateParams, never>, res: {
        send: (responseBody: ProficientAiApi.Agent) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    update(req: express.Request<{
        agent_id: serializers.AgentId.Raw;
    }, ProficientAiApi.Agent, ProficientAiApi.AgentUpdateParams, never>, res: {
        send: (responseBody: ProficientAiApi.Agent) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getConfig(req: express.Request<{
        agent_id: serializers.AgentId.Raw;
    }, ProficientAiApi.AgentConfig, never, never>, res: {
        send: (responseBody: ProficientAiApi.AgentConfig) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    updateConfig(req: express.Request<{
        agent_id: serializers.AgentId.Raw;
    }, ProficientAiApi.AgentConfig, ProficientAiApi.AgentConfigUpdateParams, never>, res: {
        send: (responseBody: ProficientAiApi.AgentConfig) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    activate(req: express.Request<{
        agent_id: serializers.AgentId.Raw;
    }, ProficientAiApi.Agent, never, never>, res: {
        send: (responseBody: ProficientAiApi.Agent) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    deactivate(req: express.Request<{
        agent_id: serializers.AgentId.Raw;
    }, ProficientAiApi.Agent, never, never>, res: {
        send: (responseBody: ProficientAiApi.Agent) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    delete(req: express.Request<{
        agent_id: serializers.AgentId.Raw;
    }, ProficientAiApi.Agent, never, never>, res: {
        send: (responseBody: ProficientAiApi.Agent) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
}
export declare class AgentsService {
    private readonly methods;
    private router;
    constructor(methods: AgentsServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
