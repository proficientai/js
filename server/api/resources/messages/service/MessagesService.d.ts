/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as ProficientAiApi from "../../..";
import express from "express";
import * as serializers from "../../../../serialization";
export interface MessagesServiceMethods {
    list(req: express.Request<never, ProficientAiApi.MessagesList, never, {
        interaction_id: ProficientAiApi.InteractionId;
        limit?: ProficientAiApi.PaginationLimit;
        starting_after?: ProficientAiApi.PaginationStartingAfter;
    }>, res: {
        send: (responseBody: ProficientAiApi.MessagesList) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    get(req: express.Request<{
        message_id: serializers.MessageId.Raw;
    }, ProficientAiApi.Message, never, never>, res: {
        send: (responseBody: ProficientAiApi.Message) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    create(req: express.Request<never, ProficientAiApi.Message, ProficientAiApi.MessageCreateParams, never>, res: {
        send: (responseBody: ProficientAiApi.Message) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    ask(req: express.Request<{
        message_id: serializers.MessageId.Raw;
    }, ProficientAiApi.Message, ProficientAiApi.MessageAskParams, never>, res: {
        send: (responseBody: ProficientAiApi.Message) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
}
export declare class MessagesService {
    private readonly methods;
    private router;
    constructor(methods: MessagesServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
